name: predict-daily

on:
  schedule:
    - cron: "0 23 * * *"     # 매일 08:00 KST (UTC 23:00)
    # - cron: "30 23 * * *"  # (선택) 매일 08:30 KST 추가 실행
  workflow_dispatch:

jobs:
  run:
    runs-on: ubuntu-latest
    env:
      TZ: Asia/Seoul
      SHEET_ID: ${{ secrets.SHEET_ID }}
      # ▶ 파이썬 코드가 ENV에서 직접 읽어 쓰도록 제공 (GOOGLE_SA_JSON 사용 시)
      GOOGLE_SA_JSON: ${{ secrets.GDRIVE_SA_JSON }}
      # ▶ 파일 경로(파이썬 코드가 파일을 읽는 경우 대비)
      SA_PATH: ${{ github.workspace }}/sa.json

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install deps
        run: |
          python -m pip install --upgrade pip
          pip install gspread google-auth pandas numpy holidays

      # ▼ 시크릿(JSON) → 파일로도 복원 (파일 방식 사용하는 코드 대비)
      - name: Write service account key (plain secret → file)
        shell: bash
        run: |
          # 멀티라인 시크릿을 내용 그대로 저장 (변수 확장/이스케이프 방지용 'EOF')
          cat > "${SA_PATH}" << 'EOF'
${{ secrets.GDRIVE_SA_JSON }}
EOF

      # ▼ JSON 유효성 검사 (내용 출력하지 않음)
      - name: Validate SA JSON
        shell: bash
        run: |
          python - <<'PY'
import json, os, sys
p_env = os.environ.get("GOOGLE_SA_JSON")
p_file = os.environ.get("SA_PATH","sa.json")

# ENV로 전달된 JSON 검증
if not p_env:
    print("⚠️ GOOGLE_SA_JSON not set")
else:
    try:
        json.loads(p_env)
        print("✅ ENV JSON valid")
    except Exception as e:
        print("❌ ENV JSON invalid:", e)
        sys.exit(1)

# 파일로 복원된 JSON 검증
try:
    with open(p_file, "r", encoding="utf-8") as f:
        json.load(f)
    print("✅ File JSON valid:", p_file, "size:", os.path.getsize(p_file), "bytes")
except Exception as e:
    print("❌ File JSON invalid:", e)
    sys.exit(1)
PY

      - name: Predict & write
  env:
    PYTHONUNBUFFERED: "1"
    SHEET_ID: ${{ secrets.SHEET_ID }}
    GOOGLE_SA_JSON: ${{ secrets.GDRIVE_SA_JSON }}   # ← 멀티라인 JSON 그대로
  run: |
    python predict_expected_counts.py
